@use "sass:math";

$grid-columns: 10;


//* Gruid divisions
$grids: (
  "1": 10,
  "2": 12 
);

$grid-gaps: (
  "0": 0,
  "1": 10px,
  "2": 20px,
  "3": 30px,
);

$layout-values: flex-start, flex-end, center, space-between, space-around;


//* base layout classes

.container {
  width: 100%;
  max-width: 1150px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
.row {
  display: flex;
  flex-flow: row wrap;
}


//* grid gaps

@each $key, $val in $grid-gaps {
  .gap-#{$key} > * {
    padding: $val;
  }
  .gap-#{$key} {
    margin-left: -$val;
    margin-right: -$val;
  }
}


//* justify content classes

@each $val in $layout-values {
  .justify-#{$val} {
    justify-content: $val;
  }
}


@each $key, $val in $grids {
  //* col classes

  @include xs {
    @for $i from 1 through $val {
      .col-#{$key}-#{$i}-xs {
        box-sizing: border-box;
        flex-grow: 0;
        width: math.div($i * 100%, $val);
      }
    }
  }
  @include sm {
    @for $i from 1 through $val {
      .col-#{$key}-#{$i}-sm {
        box-sizing: border-box;
        flex-grow: 0;
        width: math.div($i * 100%, $val);
      }
    }
  }
  @include md {
    @for $i from 1 through $val {
      .col-#{$key}-#{$i}-md {
        box-sizing: border-box;
        flex-grow: 0;
        width: math.div($i * 100%, $val);
      }
    }
  }
  @include lg {
    @for $i from 1 through $val {
      .col-#{$key}-#{$i}-lg {
        box-sizing: border-box!important;
        flex-grow: 0!important;
        width: math.div($i * 100%, $val)!important;
      }; 
    }
  }
  @include xl {
    @for $i from 1 through $val {
      .col-#{$key}-#{$i}-xl {
        box-sizing: border-box;
        flex-grow: 0;
        width: math.div($i * 100%, $val);
      }
    }
  }
}
